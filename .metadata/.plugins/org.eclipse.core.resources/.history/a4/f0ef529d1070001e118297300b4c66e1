package br.com.senaisp.bauru.richard.batalhanaval;

import java.util.Random;
import java.util.Scanner;

import br.com.senaisp.bauru.richard.projeto.Utils;

public class Tabuleiro extends TabuleiroBase {
	private static final char IS_PREENCHIDO = '▓';
	private static final char IS_LIMPO = '░';
	private static final char IS_BOMB = '¤';
	private static final char IS_BOMBOK = '†';
	//Campos
	private Scanner sc;
	private String nomeJogador;
	private boolean[][] tabuleiroAtaque;
	private Embarcacao[][] tabuleiroEmbarcacao;
	private boolean terminado;
	//Constructor
	public Tabuleiro(String nome, Scanner sc) {
		this.sc = sc;
		nomeJogador = nome;
		terminado = false;
		tabuleiroAtaque = new boolean[10][10];
		tabuleiroEmbarcacao = new Embarcacao[10][10];
		for (int lin=0;lin<10;lin++) {
			for (int col=0;col<10;col++) {
				tabuleiroAtaque[lin][col] = false;
				tabuleiroEmbarcacao[lin][col] = null;
			}
		}
	}
	
	public String getNomeJogador() {
		return nomeJogador;
	}
	public boolean isTerminado() {
		return terminado;
	}
	//metodos
	public void mostrarTabuleiro(boolean visualizarEmb) {
		                  //1234567890123
		System.out.println("  12345678910");
		for(int lin=0;lin<10;lin++) {
			char let = 'A';
			let += lin;
			System.out.print(""+let+" ");
			for (int col=0;col<10;col++) {
				char ret = IS_LIMPO;
				if (tabuleiroEmbarcacao[lin][col]!=null) {
					if (visualizarEmb){
						ret = IS_PREENCHIDO;
					}
					if (tabuleiroAtaque[lin][col]) {
						ret = IS_BOMBOK;
					}
				} else { //não tem embarcação na posição
					if (tabuleiroAtaque[lin][col]) {
						ret = IS_BOMB;
					}
				}//fim do else
				System.out.print(ret);
			}//fim do for coluna
			System.out.println();
		}//fim do for de linha
	}//fim do método
	
	public void montarTabuleiro(boolean aleatorio) {
		Random rnd = new Random();
		//0 - Porta aviões
		//1, 2 - Contra torpedeiros
		//3, 4, 5 - Submarinos
		//6, 7, 8, 9 - Barcos
		for (int id=0;id<10;id++) {
			Embarcacao emb;
			switch(id) {
			case 0 : //porta aviões
				emb = new Embarcacao(4); break;
				
			case 1 :
			case 2 : //contra-torpedeiros
				emb = new Embarcacao(3); break;
				
			case 3 :
			case 4 :
			case 5 : //submarino
				emb = new Embarcacao(2); break;
				
			default : //barcos
				emb = new Embarcacao(1); break;
			}
			String posicao;
			boolean posOK;
			do {
				//A01:B01
				posicao = aleatorio ? gerarPosicao(rnd, emb.getTamanho()) :
						Utils.entradaDados(sc, 
						"Digite a posição a ser ocupada:", 
						7, 7, 
						"[A-J](0[1-9]|10):[A-J](0[1-9]|10)",
						false);
				
				posOK = posicionarEmbarcacao(posicao,emb);
				if (!posOK && !aleatorio) {
					System.out.println("Não posso colocar "
							+ "nessa posição!");
				}
			} while(!posOK);
		}
	}
	
	private String gerarPosicao(Random rnd, int tam) {
		int horVert = rnd.nextInt(2); //0 - horizontal, 1-vertical
		int linIni, linFim, colIni, colFim;
		if (horVert==0) { //horizontal
			linIni = linFim = rnd.nextInt(10);
			colIni = rnd.nextInt(10-tam);
			colFim = colIni + tam - 1;
		} else { //vertical
			colIni = colFim = rnd.nextInt(10);
			linIni = rnd.nextInt(10-tam);
			linFim = linIni + tam - 1;
		}
		char linIniC = 'A', linFimC = 'A';
		linIniC += linIni; //aumentando a letra ou não se for 0
		linFimC += linFim;
		return "" + linIniC + 
			  ( colIni+1 < 10 ? "0" : "") + (colIni+1) +
			  ":" + linFimC + 
			  ( colFim+1 < 10 ? "0" : "") + (colFim+1);
	}
	
	private boolean posicionarEmbarcacao(String posicao, Embarcacao emb) {
		boolean ret = false;
		int linIni, linFim, colIni, colFim;
		linIni = posicao.charAt(0) - 65;//A = 65
		linFim = posicao.charAt(4) - 65;
		colIni = Integer.parseInt(posicao.substring(1,3))-1;
		colFim = Integer.parseInt(posicao.substring(5,7))-1;
		
		if (emb.getTamanho() !=
				(linFim-linIni)+(colFim-colIni)+1) {
			System.out.println("Tamanho da embarcação é "+
				emb.getTamanho());
			return ret;
		}
		
		ret = isDisponivel(posicao); //está disponível a posição?
		if (ret) { //está disponível
			//Colocando o endereço de memória da embarcação
			for (int lin=linIni;lin<=linFim;lin++) {
				for (int col=colIni;col<=colFim;col++) {
					tabuleiroEmbarcacao[lin][col] = emb;
				}
			}
		}
		return ret;
	}
	
	private boolean isDisponivel(String posicao) {
		//0123456
		//A01:A05
		int linIni, linFim, colIni, colFim;
		linIni = posicao.charAt(0) - 65;//A = 65
		linFim = posicao.charAt(4) - 65;
		colIni = Integer.parseInt(posicao.substring(1,3))-1;
		colFim = Integer.parseInt(posicao.substring(5,7))-1;
		//
		boolean isUso = false;
		for (int lin=linIni;lin<=linFim;lin++) {
			for (int col=colIni;col<=colFim;col++) {
				//Posição exata
				isUso = tabuleiroEmbarcacao[lin][col] != null;
				
				//Verificando se na linha anterior na mesma coluna tem uma embarcação
				if (!isUso && lin>0)  
					isUso = tabuleiroEmbarcacao[lin - 1][col] != null;
				
				//Verificando se na próxima linha na mesma coluna tem uma embarcação
				if (!isUso && lin<9) 
					isUso = tabuleiroEmbarcacao[lin + 1][col] != null;
				
				//Verificando se na mesma linha na coluna anterior tem uma embarcação
				if (!isUso && col>0) 
					isUso = tabuleiroEmbarcacao[lin][col - 1] != null;
				
				//Verificando se na mesma lina na coluna posterior tem uma embarcação
				if (!isUso && col<9) 
					isUso = tabuleiroEmbarcacao[lin][col + 1] != null;
				
				//Verificando o canto superior esquerdo se tem embarcação
				if (!isUso && col>0 && lin>0)
					isUso = tabuleiroEmbarcacao[lin-1][col-1] != null;
				
				//Verificando o canto inferior esquerdo se tem embarcação
				if (!isUso && col>0 && lin<9)
					isUso = tabuleiroEmbarcacao[lin+1][col-1] != null;
				
				//verificando o canto superior direito se tem embarcação
				if (!isUso && col<9 && lin>0)
					isUso = tabuleiroEmbarcacao[lin-1][col+1] != null;

				//verificando o canto inferior direito se tem embarcação
				if (!isUso && col<9 && lin<9)
					isUso = tabuleiroEmbarcacao[lin+1][col+1] != null;
					
				if (isUso) break;
			} //fim do for das colunas
			if (isUso) break;
		}// fim do for das linhas
		
		return !isUso; //retornando se está disponível ou não
	}

	@Override
	public String gerarPosicaoAleatoria() {
		char letra = 'A';
		Random rnd = new Random();
		int col = rnd.nextInt(10) + 1;
		String ret = "" + (letra + rnd.nextInt(10)) + col;
		return ret;
	}
	
	public void sofrerAtaque(String posicao) {
		if (!isTerminado()) {
			int lin = posicao.charAt(0) - 65;
			int col = Integer.parseInt(posicao.substring(1)) - 1;
			if (lin<0 || lin>9) 
				throw new RuntimeException("Linha inválida!");
			
		}
	}
	
}//fim da classe
